#
# Responsible for creating ecapture snapshots for testing and releasing
#

.PHONY: all
all: help
release: snapshot build_deb snapshot_android publish

#
# make
#

.ONESHELL:
SHELL = /bin/sh

MAKEFLAGS += --no-print-directory

#
# tools
#

CMD_CHECKSUM ?= sha256sum
CMD_GITHUB ?= gh
CMD_TAR ?= tar
CMD_GIT ?= git
CMD_RM ?= rm
CMD_TOUCH ?= touch
CMD_MKDIR ?= mkdir
CMD_MV ?= mv
CMD_CP ?= cp
CMD_DPKG-DEB ?= dpkg-deb
CMD_SED ?= sed

UNAME_M := $(shell uname -m)
SNAPSHOT_VERSION ?= $(shell git rev-parse HEAD)
BUILD_DATE := $(shell date +%Y-%m-%d)
ARCH := $(UNAME_M)
ifeq ($(UNAME_M), x86_64)
    ARCH = amd64
endif

ifeq ($(UNAME_M), aarch64)
    ARCH = arm64
endif


#
# output dir
#

OUTPUT_DIR = ./bin
TAR_DIR = ecapture-$(SNAPSHOT_VERSION)-linux-$(UNAME_M)
TAR_DIR_NOCORE = ecapture-$(SNAPSHOT_VERSION)-linux-nocore
TAR_DIR_ANDROID = ecapture-$(SNAPSHOT_VERSION)-android-$(UNAME_M)
TAR_DIR_ANDROID_NOCORE = ecapture-$(SNAPSHOT_VERSION)-android-$(UNAME_M)-nocore

# from CLI args.
RELEASE_NOTES ?= $(OUTPUT_DIR)/release_notes.txt

# DEB 软件包的名称和版本
PACKAGE_NAME = ecapture
PACKAGE_DESC = eCapture(旁观者): Capture SSL/TLS text content without a CA certificate using eBPF. This tool is compatible with Linux/Android x86_64/Aarch64.
PACKAGE_HOMEPAGE = https://ecapture.cc
PACKAGE_MAINTAINER = CFC4N <cfc4n.cs@gmail.com>
PACKAGE_VERSION ?= $(shell echo $(SNAPSHOT_VERSION) | $(CMD_SED) 's/v//g' )
OUT_DEB_FILE = $(OUTPUT_DIR)/$(PACKAGE_NAME)_$(SNAPSHOT_VERSION)_linux_$(ARCH).deb

# 构建目录
BUILD_DIR = build

#
# Create a release snapshot
#

OUT_ARCHIVE := $(OUTPUT_DIR)/$(TAR_DIR).tar.gz
OUT_ARCHIVE_NOCORE := $(OUTPUT_DIR)/$(TAR_DIR_NOCORE).tar.gz
OUT_ARCHIVE_ANDROID := $(OUTPUT_DIR)/$(TAR_DIR_ANDROID).tar.gz
OUT_ARCHIVE_ANDROID_NOCORE := $(OUTPUT_DIR)/$(TAR_DIR_ANDROID_NOCORE).tar.gz
OUT_CHECKSUMS := $(OUTPUT_DIR)/checksum-$(SNAPSHOT_VERSION).txt


.ONESHELL:
.check_%:
#
	@command -v $* >/dev/null
	if [ $$? -ne 0 ]; then
		echo "missing required tool $*"
		exit 1
	else
		touch $@ # avoid target rebuilds due to inexistent file
	fi

#
# environment
#

.PHONY: env
env:
	@echo ---------------------------------------
	@echo "CMD_CHECKSUM          $(CMD_CHECKSUM)"
	@echo "CMD_GIT               $(CMD_GIT)"
	@echo "CMD_GITHUB            $(CMD_GITHUB)"
	@echo "CMD_TAR               $(CMD_TAR)"
	@echo "CMD_TOUCH             $(CMD_TOUCH)"
	@echo "CMD_RM                $(CMD_RM)"
	@echo "CMD_MKDIR             $(CMD_MKDIR)"
	@echo ---------------------------------------
	@echo "SNAPSHOT_VERSION      $(SNAPSHOT_VERSION)"
	@echo "PACKAGE_VERSION      $(PACKAGE_VERSION)"
	@echo ---------------------------------------

#
# usage
#

.PHONY: help
help:
	@echo ""
	@echo "Create ecapture snapshots for testing and releasing"
	@echo ""
	@echo "To generate a release snapshot:"
	@echo ""
	@echo "    $$ make -f builder/Makefile.release snapshot"
	@echo ""
	@echo "    - Compiles ecapture"
	@echo "    - Creates an archive of build artifacts along with license"
	@echo "    - Takes a checksum of the archive"
	@echo ""
	@echo "    Example:"
	@echo ""
	@echo "        To create build artifacts versioned by latest git SHA:"
	@echo ""
	@echo "        $$ make -f builder/Makefile.release snapshot"
	@echo ""
	@echo "        To create build artifacts with version v0.1.6:"
	@echo ""
	@echo "        $$ SNAPSHOT_VERSION=v0.1.6 \ "
	@echo "                make -f builder/Makefile.release snapshot"
	@echo ""
	@echo "To publish a release:"
	@echo ""
	@echo "    $$ SNAPSHOT_VERSION=v0.1.6 \ "
	@echo "        make -f builder/Makefile.release publish"
	@echo ""
	@echo ""
	@echo "Clean leftovers:"
	@echo ""
	@echo "    $$ make -f builder/Makefile.release clean"
	@echo ""

#
# requirements
#

.PHONY: .check_tree
.check_tree:
#
	@if [ ! -d ./builder ]; then
		echo "you must be in the root directory"
		exit 1
	fi

$(OUTPUT_DIR):
#
	$(CMD_MKDIR) -p $@
#	$(CMD_TOUCH) $(RELEASE_NOTES)



.PHONY: snapshot
snapshot: \
	$(OUTPUT_DIR) \
	| .check_tree \
	.check_$(CMD_TAR) \
	.check_$(CMD_CHECKSUM) \
	.check_$(CMD_GITHUB)

	# build binaries
	$(MAKE) clean
	$(MAKE) nocore RELEASE_TAG=$(SNAPSHOT_VERSION)
	# create the tar ball and checksum files
	$(CMD_MKDIR) -p $(TAR_DIR)
	$(CMD_CP) LICENSE $(TAR_DIR)/LICENSE
	$(CMD_CP) CHANGELOG.md $(TAR_DIR)/CHANGELOG.md
	$(CMD_CP) README.md $(TAR_DIR)/README.md
	$(CMD_CP) README_CN.md $(TAR_DIR)/README_CN.md
	$(CMD_CP) $(OUTPUT_DIR)/ecapture $(TAR_DIR)/ecapture
	$(CMD_TAR)  -czf $(OUT_ARCHIVE) $(TAR_DIR)
	cd $(OUTPUT_DIR)
	$(CMD_CHECKSUM) $(OUT_ARCHIVE_ANDROID) > ./../$(OUT_CHECKSUMS)
	cd ../

.PHONY: snapshot_android
snapshot_android: \
	$(OUTPUT_DIR) \
	| .check_tree \
	.check_$(CMD_TAR) \
	.check_$(CMD_CHECKSUM) \
	.check_$(CMD_GITHUB)

	# build binaries
	$(MAKE) clean
	ANDROID=1 $(MAKE) nocore RELEASE_TAG=$(SNAPSHOT_VERSION)
	# create the tar ball and checksum files
	$(CMD_MKDIR) -p $(TAR_DIR_ANDROID_NOCORE)
	$(CMD_CP) LICENSE $(TAR_DIR_ANDROID_NOCORE)/LICENSE
	$(CMD_CP) CHANGELOG.md $(TAR_DIR_ANDROID_NOCORE)/CHANGELOG.md
	$(CMD_CP) README.md $(TAR_DIR_ANDROID_NOCORE)/README.md
	$(CMD_CP) README_CN.md $(TAR_DIR_ANDROID_NOCORE)/README_CN.md
	$(CMD_CP) $(OUTPUT_DIR)/ecapture $(TAR_DIR_ANDROID_NOCORE)/ecapture
	$(CMD_TAR)  -czf $(OUT_ARCHIVE_ANDROID_NOCORE) $(TAR_DIR_ANDROID_NOCORE)
	cd $(OUTPUT_DIR)
	$(CMD_CHECKSUM) $(OUT_ARCHIVE_ANDROID_NOCORE) >> ./../$(OUT_CHECKSUMS)
	cd ../

.PHONY: publish
publish: \
	$(OUTPUT_DIR) \
	$(OUT_ARCHIVE) \
	$(OUT_ARCHIVE_ANDROID_NOCORE) \
	$(OUT_CHECKSUMS) \
	$(OUT_DEB_FILE) \
	| .check_tree \
	.check_$(CMD_GITHUB)
#
	# release it!
	$(CMD_GITHUB) release create $(SNAPSHOT_VERSION) $(OUT_ARCHIVE) $(OUT_ARCHIVE_ANDROID_NOCORE) $(OUT_DEB_FILE) $(OUT_CHECKSUMS) --title "eCapture $(SNAPSHOT_VERSION)"  --notes-file $(RELEASE_NOTES)

.PHONY: clean
clean:
#
	$(MAKE) clean

.PHONY: deb
deb: snapshot build_deb

# 用于构建DEB包的目标
build_deb:
	# 创建软件包目录结构
	$(CMD_RM) -rf $(BUILD_DIR)
	$(CMD_MKDIR) -p $(BUILD_DIR)/DEBIAN
	$(CMD_MKDIR) -p $(BUILD_DIR)/usr/local/bin
    # 复制程序文件到软件包目录
	$(CMD_CP) bin/ecapture $(BUILD_DIR)/usr/local/bin/ecapture  # 将二进制文件复制到目标位置
    # 创建控制文件 (DEBIAN/control)
	echo "Package: $(PACKAGE_NAME)" > $(BUILD_DIR)/DEBIAN/control
	echo "Version: $(PACKAGE_VERSION)" >> $(BUILD_DIR)/DEBIAN/control
	echo "BuildDate: $(BUILD_DATE)" >> $(BUILD_DIR)/DEBIAN/control
	echo "Architecture: $(ARCH)" >> $(BUILD_DIR)/DEBIAN/control
	echo "Maintainer: $(PACKAGE_MAINTAINER)" >> $(BUILD_DIR)/DEBIAN/control
	echo "Description: $(PACKAGE_DESC)" >> $(BUILD_DIR)/DEBIAN/control
	echo "Homepage: $(PACKAGE_HOMEPAGE)" >> $(BUILD_DIR)/DEBIAN/control
    # 构建DEB包
	$(CMD_DPKG-DEB) --build $(BUILD_DIR) $(OUT_DEB_FILE)